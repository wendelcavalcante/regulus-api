{"ast":null,"code":"/**\n * @internal\n *\n * This function is used to get the next checkbox state. This function is separated\n * because the checkbox state is used in both `TableHeader` and `TableBody` components.\n */\nexport function getNextCheckboxState({\n  checkboxState,\n  checkboxProp,\n  data,\n  filteredDataLength,\n  idProp,\n  type\n}) {\n  const nextCheckboxState = Object.assign({}, checkboxState[checkboxProp]);\n  const newSet = new Set(checkboxState[checkboxProp].selected);\n  if (Array.isArray(data)) {\n    for (const row of data) {\n      const value = row[idProp];\n      addOrRemoveFromSet(newSet, value, type);\n    }\n  } else {\n    addOrRemoveFromSet(newSet, data[idProp], type);\n  }\n  nextCheckboxState.selected = newSet;\n  nextCheckboxState.state = newSet.size === 0 ? 'none-selected' : newSet.size === filteredDataLength ? 'all-selected' : 'some-selected';\n  return nextCheckboxState;\n}\n// Helper functions.\nfunction addOrRemoveFromSet(set, value, type) {\n  // Depending on the checkbox state, delete or add.\n  if (type === 'remove') {\n    set.delete(value);\n  } else {\n    set.add(value);\n  }\n}","map":{"version":3,"names":["getNextCheckboxState","checkboxState","checkboxProp","data","filteredDataLength","idProp","type","nextCheckboxState","Object","assign","newSet","Set","selected","Array","isArray","row","value","addOrRemoveFromSet","state","size","set","delete","add"],"sources":["/home/wendel/desen/regulus/node_modules/react-bs-datatable/lib/esm/helpers/checkbox.js"],"sourcesContent":["/**\n * @internal\n *\n * This function is used to get the next checkbox state. This function is separated\n * because the checkbox state is used in both `TableHeader` and `TableBody` components.\n */\nexport function getNextCheckboxState({ checkboxState, checkboxProp, data, filteredDataLength, idProp, type }) {\n    const nextCheckboxState = Object.assign({}, checkboxState[checkboxProp]);\n    const newSet = new Set(checkboxState[checkboxProp].selected);\n    if (Array.isArray(data)) {\n        for (const row of data) {\n            const value = row[idProp];\n            addOrRemoveFromSet(newSet, value, type);\n        }\n    }\n    else {\n        addOrRemoveFromSet(newSet, data[idProp], type);\n    }\n    nextCheckboxState.selected = newSet;\n    nextCheckboxState.state =\n        newSet.size === 0\n            ? 'none-selected'\n            : newSet.size === filteredDataLength\n                ? 'all-selected'\n                : 'some-selected';\n    return nextCheckboxState;\n}\n// Helper functions.\nfunction addOrRemoveFromSet(set, value, type) {\n    // Depending on the checkbox state, delete or add.\n    if (type === 'remove') {\n        set.delete(value);\n    }\n    else {\n        set.add(value);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,oBAAoBA,CAAC;EAAEC,aAAa;EAAEC,YAAY;EAAEC,IAAI;EAAEC,kBAAkB;EAAEC,MAAM;EAAEC;AAAK,CAAC,EAAE;EAC1G,MAAMC,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAER,aAAa,CAACC,YAAY,CAAC,CAAC;EACxE,MAAMQ,MAAM,GAAG,IAAIC,GAAG,CAACV,aAAa,CAACC,YAAY,CAAC,CAACU,QAAQ,CAAC;EAC5D,IAAIC,KAAK,CAACC,OAAO,CAACX,IAAI,CAAC,EAAE;IACrB,KAAK,MAAMY,GAAG,IAAIZ,IAAI,EAAE;MACpB,MAAMa,KAAK,GAAGD,GAAG,CAACV,MAAM,CAAC;MACzBY,kBAAkB,CAACP,MAAM,EAAEM,KAAK,EAAEV,IAAI,CAAC;IAC3C;EACJ,CAAC,MACI;IACDW,kBAAkB,CAACP,MAAM,EAAEP,IAAI,CAACE,MAAM,CAAC,EAAEC,IAAI,CAAC;EAClD;EACAC,iBAAiB,CAACK,QAAQ,GAAGF,MAAM;EACnCH,iBAAiB,CAACW,KAAK,GACnBR,MAAM,CAACS,IAAI,KAAK,CAAC,GACX,eAAe,GACfT,MAAM,CAACS,IAAI,KAAKf,kBAAkB,GAC9B,cAAc,GACd,eAAe;EAC7B,OAAOG,iBAAiB;AAC5B;AACA;AACA,SAASU,kBAAkBA,CAACG,GAAG,EAAEJ,KAAK,EAAEV,IAAI,EAAE;EAC1C;EACA,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACnBc,GAAG,CAACC,MAAM,CAACL,KAAK,CAAC;EACrB,CAAC,MACI;IACDI,GAAG,CAACE,GAAG,CAACN,KAAK,CAAC;EAClB;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}