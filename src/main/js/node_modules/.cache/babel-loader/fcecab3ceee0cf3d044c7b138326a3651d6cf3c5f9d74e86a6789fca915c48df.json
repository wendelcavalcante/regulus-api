{"ast":null,"code":"import React from 'react';\nimport { useCreateCheckboxHandlers } from '../helpers/hooks';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for selection or deselection of all rows. This is\n * only useful when pagination and checkbox are both enabled. When only\n * some (or none) of the rows are checked, then this will render the\n * number of checked rows, as well as the \"Select all\" button.\n * On the other hand, when all rows are selected, then it will\n * change to \"Deselect all\" button.\n *\n * This is only fit for an uncontrolled table.\n */\nexport function BulkCheckboxControl({\n  classes\n}) {\n  const {\n    checkboxState: checkboxStateContext,\n    onCheckboxChange: onCheckboxChangeContext,\n    filteredDataLength: filteredDataLengthContext,\n    previouslyModifiedCheckbox: previouslyModifiedCheckboxContext,\n    data\n  } = useDatatableWrapper();\n  const checkboxState = checkboxStateContext;\n  const filteredDataLength = filteredDataLengthContext;\n  // Not sure why TypeScript is classifying this as non-nullable `CheckboxState` if we specify type by not using `as`.\n  const previouslyModifiedCheckbox = checkboxState[previouslyModifiedCheckboxContext.current.checkboxProp];\n  const onCheckboxChange = onCheckboxChangeContext;\n  const state = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.state;\n  let rendered;\n  const {\n    createBulkCheckboxClickHandler\n  } = useCreateCheckboxHandlers({\n    checkboxState,\n    data,\n    filteredDataLength,\n    onCheckboxChange\n  });\n  const onClick = createBulkCheckboxClickHandler();\n  const buttonClassName = (classes === null || classes === void 0 ? void 0 : classes.selectRemoveAllText) || 'text-primary p-0 border-0 bg-transparent';\n  if (state === 'all-selected') {\n    rendered = React.createElement(React.Fragment, null, \"All \", filteredDataLength, \" \", pluralize('row', filteredDataLength), ' ', \"selected.\", React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: 0,\n      onClick: onClick,\n      className: buttonClassName\n    }, \"Deselect all rows\"));\n  } else if (state === 'some-selected') {\n    const selectedSize = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.selected.size;\n    rendered = React.createElement(React.Fragment, null, selectedSize, \" \", pluralize('row', selectedSize), \" selected.\", ' ', React.createElement(\"button\", {\n      type: \"button\",\n      tabIndex: 0,\n      onClick: onClick,\n      className: buttonClassName\n    }, \"Select all rows\"));\n  } else {\n    // Zero-width space.\n    rendered = React.createElement(\"span\", null, \"\\u200B\");\n  }\n  return React.createElement(\"div\", {\n    className: rendered === undefined ? 'invisible' : undefined\n  }, rendered);\n}\n// Helper functions.\nfunction pluralize(word, length) {\n  if (length === 1) return word;\n  return `${word}s`;\n}","map":{"version":3,"names":["React","useCreateCheckboxHandlers","useDatatableWrapper","BulkCheckboxControl","classes","checkboxState","checkboxStateContext","onCheckboxChange","onCheckboxChangeContext","filteredDataLength","filteredDataLengthContext","previouslyModifiedCheckbox","previouslyModifiedCheckboxContext","data","current","checkboxProp","state","rendered","createBulkCheckboxClickHandler","onClick","buttonClassName","selectRemoveAllText","createElement","Fragment","pluralize","type","tabIndex","className","selectedSize","selected","size","undefined","word","length"],"sources":["/home/wendel/desen/regulus/node_modules/react-bs-datatable/lib/esm/components/BulkCheckboxControl.js"],"sourcesContent":["import React from 'react';\nimport { useCreateCheckboxHandlers } from '../helpers/hooks';\nimport { useDatatableWrapper } from './DatatableWrapper';\n/**\n * Renders a control for selection or deselection of all rows. This is\n * only useful when pagination and checkbox are both enabled. When only\n * some (or none) of the rows are checked, then this will render the\n * number of checked rows, as well as the \"Select all\" button.\n * On the other hand, when all rows are selected, then it will\n * change to \"Deselect all\" button.\n *\n * This is only fit for an uncontrolled table.\n */\nexport function BulkCheckboxControl({ classes }) {\n    const { checkboxState: checkboxStateContext, onCheckboxChange: onCheckboxChangeContext, filteredDataLength: filteredDataLengthContext, previouslyModifiedCheckbox: previouslyModifiedCheckboxContext, data } = useDatatableWrapper();\n    const checkboxState = checkboxStateContext;\n    const filteredDataLength = filteredDataLengthContext;\n    // Not sure why TypeScript is classifying this as non-nullable `CheckboxState` if we specify type by not using `as`.\n    const previouslyModifiedCheckbox = checkboxState[previouslyModifiedCheckboxContext.current.checkboxProp];\n    const onCheckboxChange = onCheckboxChangeContext;\n    const state = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.state;\n    let rendered;\n    const { createBulkCheckboxClickHandler } = useCreateCheckboxHandlers({\n        checkboxState,\n        data,\n        filteredDataLength,\n        onCheckboxChange\n    });\n    const onClick = createBulkCheckboxClickHandler();\n    const buttonClassName = (classes === null || classes === void 0 ? void 0 : classes.selectRemoveAllText) || 'text-primary p-0 border-0 bg-transparent';\n    if (state === 'all-selected') {\n        rendered = (React.createElement(React.Fragment, null,\n            \"All \",\n            filteredDataLength,\n            \" \",\n            pluralize('row', filteredDataLength),\n            ' ',\n            \"selected.\",\n            React.createElement(\"button\", { type: \"button\", tabIndex: 0, onClick: onClick, className: buttonClassName }, \"Deselect all rows\")));\n    }\n    else if (state === 'some-selected') {\n        const selectedSize = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.selected.size;\n        rendered = (React.createElement(React.Fragment, null,\n            selectedSize,\n            \" \",\n            pluralize('row', selectedSize),\n            \" selected.\",\n            ' ',\n            React.createElement(\"button\", { type: \"button\", tabIndex: 0, onClick: onClick, className: buttonClassName }, \"Select all rows\")));\n    }\n    else {\n        // Zero-width space.\n        rendered = React.createElement(\"span\", null, \"\\u200B\");\n    }\n    return (React.createElement(\"div\", { className: rendered === undefined ? 'invisible' : undefined }, rendered));\n}\n// Helper functions.\nfunction pluralize(word, length) {\n    if (length === 1)\n        return word;\n    return `${word}s`;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}