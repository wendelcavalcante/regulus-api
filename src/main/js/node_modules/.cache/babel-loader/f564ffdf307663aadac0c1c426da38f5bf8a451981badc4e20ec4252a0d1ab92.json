{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useDatatableWrapper } from '../components/DatatableWrapper';\nimport { getNextCheckboxState } from './checkbox';\nexport function useControlledStateSetter(controlledProps) {\n  // Make this only run once.\n  const {\n    setIsControlled\n  } = useDatatableWrapper();\n  const ref = useRef(controlledProps);\n  useEffect(() => {\n    if (ref.current !== undefined) {\n      setIsControlled(true);\n    }\n  }, []);\n}\n/**\n * A hook containing functions to create table checkbox event handlers.\n * As library users, most likely you'll most likely be using `createBulkCheckboxClickHandler`. Example usage:\n *\n * ```\n * const { createBulkCheckboxClickHandler } = useCreateCheckboxHandlers();\n * const onClick = createBulkCheckboxClickHandler('add', {\n *   checkboxProp: 'checkbox',\n *   idProp: 'name'\n * })\n *\n * <button onClick={onClick}>Add all to selection</button>\n * ```\n */\nexport function useCreateCheckboxHandlers(param) {\n  const {\n    checkboxState: checkboxStateContext,\n    onCheckboxChange: onCheckboxChangeContext,\n    filteredDataLength: filteredDataLengthContext,\n    previouslyModifiedCheckbox,\n    data: dataContext,\n    body\n  } = useDatatableWrapper();\n  const {\n    checkboxState: checkboxStateProp,\n    onCheckboxChange: onCheckboxChangeProp,\n    filteredDataLength: filteredDataLengthProp,\n    data: dataProp\n  } = param || {};\n  const checkboxState = checkboxStateProp || checkboxStateContext;\n  const onCheckboxChange = onCheckboxChangeProp || onCheckboxChangeContext;\n  const filteredDataLength = filteredDataLengthProp || filteredDataLengthContext;\n  const data = dataProp || dataContext;\n  // Whenever we change checkbox, we should update the table header's column representation as well.\n  function onCheckboxChangeEffectForHeaderColumn({\n    idProp,\n    checkboxProp\n  }) {\n    previouslyModifiedCheckbox.current = {\n      checkboxProp,\n      idProp\n    };\n  }\n  // TODO: refactor to be an object parameter in the next major version.\n  /**\n   * Creates a bulk checkbox click handler. There are 2 ways to use this function:\n   *\n   * 1. Specify explicitly: `createBulkCheckboxClickHandler(\"add\")` or `createBulkCheckboxClickHandler(\"remove\")`.\n   *    This will create a handler that will alwaays either add all to selection or remove all from selection.\n   * 2. Don't pass an argument: `createBulkCheckboxClickHandler()`. Using this, the action will be \"computed\"\n   *    by this function internals.\n   */\n  function createBulkCheckboxClickHandler(type, checkboxInfo, checkboxStateOverrider) {\n    const checkboxProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.checkboxProp) || previouslyModifiedCheckbox.current.checkboxProp;\n    const idProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.idProp) || previouslyModifiedCheckbox.current.idProp;\n    let effectiveType = type;\n    if (!effectiveType) {\n      const previouslyUpdatedCheckbox = checkboxState[checkboxProp];\n      const state = previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.state;\n      if (state === 'all-selected') {\n        effectiveType = 'remove';\n      } else if (state === 'some-selected') {\n        effectiveType = 'add';\n      }\n    }\n    return event => {\n      if (!effectiveType) return;\n      let nextCheckboxState = getNextCheckboxState({\n        checkboxState,\n        data: body,\n        filteredDataLength,\n        idProp,\n        checkboxProp,\n        type: effectiveType\n      });\n      if (checkboxStateOverrider) {\n        nextCheckboxState = checkboxStateOverrider(nextCheckboxState);\n      }\n      const params = [{\n        checkboxProp,\n        nextCheckboxState\n      }, {\n        others: event\n      }];\n      onCheckboxChange(...params);\n      onCheckboxChangeEffectForHeaderColumn({\n        checkboxProp,\n        idProp\n      });\n    };\n  }\n  /**\n   * Creates a table body column checkbox click handler. This will be mostly used in the library's internals.\n   */\n  function createColumnCheckboxClickHandler({\n    checkboxProp,\n    idProp,\n    rowIdx\n  }) {\n    return event => {\n      const isSelected = checkboxState[checkboxProp].selected.has(data[rowIdx][idProp]);\n      const nextCheckboxState = getNextCheckboxState({\n        checkboxState,\n        data: data[rowIdx],\n        idProp,\n        filteredDataLength,\n        checkboxProp,\n        type: isSelected ? 'remove' : 'add'\n      });\n      const params = [{\n        checkboxProp,\n        nextCheckboxState\n      }, {\n        checkbox: event\n      }];\n      onCheckboxChange(...params);\n      onCheckboxChangeEffectForHeaderColumn({\n        checkboxProp,\n        idProp\n      });\n    };\n  }\n  /**\n   * Creates a table header column checkbox click handler. This will be mostly used in the library's internals.\n   */\n  function createHeaderCheckboxClickHandler({\n    checkboxProp,\n    idProp\n  }) {\n    return event => {\n      let numberOfSelectedRowsInCurrentPage = 0;\n      let nextCheckboxType;\n      for (const row of data) {\n        if (checkboxState[checkboxProp].selected.has(row[idProp])) {\n          numberOfSelectedRowsInCurrentPage += 1;\n        }\n      }\n      if (numberOfSelectedRowsInCurrentPage === data.length) {\n        nextCheckboxType = 'remove';\n      } else {\n        nextCheckboxType = 'add';\n      }\n      const nextCheckboxState = getNextCheckboxState({\n        checkboxState,\n        data,\n        idProp,\n        filteredDataLength,\n        checkboxProp,\n        type: nextCheckboxType\n      });\n      const params = [{\n        checkboxProp,\n        nextCheckboxState\n      }, {\n        checkbox: event\n      }];\n      onCheckboxChange(...params);\n      onCheckboxChangeEffectForHeaderColumn({\n        checkboxProp,\n        idProp\n      });\n    };\n  }\n  return {\n    createBulkCheckboxClickHandler,\n    createColumnCheckboxClickHandler,\n    createHeaderCheckboxClickHandler\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useDatatableWrapper","getNextCheckboxState","useControlledStateSetter","controlledProps","setIsControlled","ref","current","undefined","useCreateCheckboxHandlers","param","checkboxState","checkboxStateContext","onCheckboxChange","onCheckboxChangeContext","filteredDataLength","filteredDataLengthContext","previouslyModifiedCheckbox","data","dataContext","body","checkboxStateProp","onCheckboxChangeProp","filteredDataLengthProp","dataProp","onCheckboxChangeEffectForHeaderColumn","idProp","checkboxProp","createBulkCheckboxClickHandler","type","checkboxInfo","checkboxStateOverrider","effectiveType","previouslyUpdatedCheckbox","state","event","nextCheckboxState","params","others","createColumnCheckboxClickHandler","rowIdx","isSelected","selected","has","checkbox","createHeaderCheckboxClickHandler","numberOfSelectedRowsInCurrentPage","nextCheckboxType","row","length"],"sources":["/home/wendel/desen/regulus/node_modules/react-bs-datatable/lib/esm/helpers/hooks.js"],"sourcesContent":["import { useEffect, useRef } from 'react';\nimport { useDatatableWrapper } from '../components/DatatableWrapper';\nimport { getNextCheckboxState } from './checkbox';\nexport function useControlledStateSetter(controlledProps) {\n    // Make this only run once.\n    const { setIsControlled } = useDatatableWrapper();\n    const ref = useRef(controlledProps);\n    useEffect(() => {\n        if (ref.current !== undefined) {\n            setIsControlled(true);\n        }\n    }, []);\n}\n/**\n * A hook containing functions to create table checkbox event handlers.\n * As library users, most likely you'll most likely be using `createBulkCheckboxClickHandler`. Example usage:\n *\n * ```\n * const { createBulkCheckboxClickHandler } = useCreateCheckboxHandlers();\n * const onClick = createBulkCheckboxClickHandler('add', {\n *   checkboxProp: 'checkbox',\n *   idProp: 'name'\n * })\n *\n * <button onClick={onClick}>Add all to selection</button>\n * ```\n */\nexport function useCreateCheckboxHandlers(param) {\n    const { checkboxState: checkboxStateContext, onCheckboxChange: onCheckboxChangeContext, filteredDataLength: filteredDataLengthContext, previouslyModifiedCheckbox, data: dataContext, body } = useDatatableWrapper();\n    const { checkboxState: checkboxStateProp, onCheckboxChange: onCheckboxChangeProp, filteredDataLength: filteredDataLengthProp, data: dataProp } = param || {};\n    const checkboxState = checkboxStateProp || checkboxStateContext;\n    const onCheckboxChange = onCheckboxChangeProp || onCheckboxChangeContext;\n    const filteredDataLength = filteredDataLengthProp || filteredDataLengthContext;\n    const data = dataProp || dataContext;\n    // Whenever we change checkbox, we should update the table header's column representation as well.\n    function onCheckboxChangeEffectForHeaderColumn({ idProp, checkboxProp }) {\n        previouslyModifiedCheckbox.current = { checkboxProp, idProp };\n    }\n    // TODO: refactor to be an object parameter in the next major version.\n    /**\n     * Creates a bulk checkbox click handler. There are 2 ways to use this function:\n     *\n     * 1. Specify explicitly: `createBulkCheckboxClickHandler(\"add\")` or `createBulkCheckboxClickHandler(\"remove\")`.\n     *    This will create a handler that will alwaays either add all to selection or remove all from selection.\n     * 2. Don't pass an argument: `createBulkCheckboxClickHandler()`. Using this, the action will be \"computed\"\n     *    by this function internals.\n     */\n    function createBulkCheckboxClickHandler(type, checkboxInfo, checkboxStateOverrider) {\n        const checkboxProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.checkboxProp) ||\n            previouslyModifiedCheckbox.current.checkboxProp;\n        const idProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.idProp) || previouslyModifiedCheckbox.current.idProp;\n        let effectiveType = type;\n        if (!effectiveType) {\n            const previouslyUpdatedCheckbox = checkboxState[checkboxProp];\n            const state = previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.state;\n            if (state === 'all-selected') {\n                effectiveType = 'remove';\n            }\n            else if (state === 'some-selected') {\n                effectiveType = 'add';\n            }\n        }\n        return (event) => {\n            if (!effectiveType)\n                return;\n            let nextCheckboxState = getNextCheckboxState({\n                checkboxState,\n                data: body,\n                filteredDataLength,\n                idProp,\n                checkboxProp,\n                type: effectiveType\n            });\n            if (checkboxStateOverrider) {\n                nextCheckboxState = checkboxStateOverrider(nextCheckboxState);\n            }\n            const params = [\n                {\n                    checkboxProp,\n                    nextCheckboxState\n                },\n                {\n                    others: event\n                }\n            ];\n            onCheckboxChange(...params);\n            onCheckboxChangeEffectForHeaderColumn({\n                checkboxProp,\n                idProp\n            });\n        };\n    }\n    /**\n     * Creates a table body column checkbox click handler. This will be mostly used in the library's internals.\n     */\n    function createColumnCheckboxClickHandler({ checkboxProp, idProp, rowIdx }) {\n        return (event) => {\n            const isSelected = checkboxState[checkboxProp].selected.has(data[rowIdx][idProp]);\n            const nextCheckboxState = getNextCheckboxState({\n                checkboxState,\n                data: data[rowIdx],\n                idProp,\n                filteredDataLength,\n                checkboxProp,\n                type: isSelected ? 'remove' : 'add'\n            });\n            const params = [\n                {\n                    checkboxProp,\n                    nextCheckboxState\n                },\n                {\n                    checkbox: event\n                }\n            ];\n            onCheckboxChange(...params);\n            onCheckboxChangeEffectForHeaderColumn({\n                checkboxProp,\n                idProp\n            });\n        };\n    }\n    /**\n     * Creates a table header column checkbox click handler. This will be mostly used in the library's internals.\n     */\n    function createHeaderCheckboxClickHandler({ checkboxProp, idProp }) {\n        return (event) => {\n            let numberOfSelectedRowsInCurrentPage = 0;\n            let nextCheckboxType;\n            for (const row of data) {\n                if (checkboxState[checkboxProp].selected.has(row[idProp])) {\n                    numberOfSelectedRowsInCurrentPage += 1;\n                }\n            }\n            if (numberOfSelectedRowsInCurrentPage === data.length) {\n                nextCheckboxType = 'remove';\n            }\n            else {\n                nextCheckboxType = 'add';\n            }\n            const nextCheckboxState = getNextCheckboxState({\n                checkboxState,\n                data,\n                idProp,\n                filteredDataLength,\n                checkboxProp,\n                type: nextCheckboxType\n            });\n            const params = [\n                {\n                    checkboxProp,\n                    nextCheckboxState\n                },\n                {\n                    checkbox: event\n                }\n            ];\n            onCheckboxChange(...params);\n            onCheckboxChangeEffectForHeaderColumn({\n                checkboxProp,\n                idProp\n            });\n        };\n    }\n    return {\n        createBulkCheckboxClickHandler,\n        createColumnCheckboxClickHandler,\n        createHeaderCheckboxClickHandler\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}