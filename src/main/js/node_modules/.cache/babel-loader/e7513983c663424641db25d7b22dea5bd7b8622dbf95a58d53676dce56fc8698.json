{"ast":null,"code":"import React, { useEffect, useMemo, useRef } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { useControlledStateSetter } from '../helpers/hooks';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\nimport { getPageNumbers } from '../helpers/pagination';\nconst DEFAULT_PAGINATION_RANGE = 3;\n/**\n * Renders a control for the pagination. It consists of \"First\", \"Prev\",\n * \"Next\", and \"Last\" buttons. Additionally, between the \"Prev\" and \"Next\" buttons,\n * there will be at maximum 3 numbered buttons, indicating the pages to navigate.\n *\n * The currently active page will always be disabled, as well as the \"First\" or \"Last\"\n * buttons if the `currentPage` represents the first page and last page, respectively.\n *\n * When `alwaysShowPagination` is set to `false`, then this component will be visually hidden.\n */\nexport function Pagination({\n  labels,\n  classes,\n  paginationRange = DEFAULT_PAGINATION_RANGE,\n  alwaysShowPagination = true,\n  controlledProps\n}) {\n  const {\n    currentPageState: currentPageStateContext,\n    maxPage: maxPageContext,\n    onPaginationChange: onPaginationChangeContext\n  } = useDatatableWrapper();\n  useControlledStateSetter(controlledProps);\n  // Controlled has the bigger priority.\n  const currentPageState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.currentPage) || currentPageStateContext;\n  const maxPage = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.maxPage) || maxPageContext;\n  const onPaginationChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onPaginationChange) || onPaginationChangeContext;\n  // Hide pagination if pagination is meant to not always be shown and the max page is 1,\n  // or if rows per page is -1.\n  const hidePagination = !alwaysShowPagination && maxPage === 1;\n  const buttons = [];\n  const firstLabel = (labels === null || labels === void 0 ? void 0 : labels.firstPage) || 'First';\n  const prevLabel = (labels === null || labels === void 0 ? void 0 : labels.prevPage) || 'Prev';\n  const nextLabel = (labels === null || labels === void 0 ? void 0 : labels.nextPage) || 'Next';\n  const lastLabel = (labels === null || labels === void 0 ? void 0 : labels.lastPage) || 'Last';\n  const prevPageNumbers = useRef(undefined);\n  const pageNumbers = useMemo(() => {\n    return getPageNumbers({\n      currentPageState,\n      maxPage,\n      paginationRange,\n      prevPageNumbers: prevPageNumbers.current\n    });\n  }, [currentPageState, maxPage, paginationRange]);\n  useEffect(() => {\n    prevPageNumbers.current = pageNumbers;\n  }, [pageNumbers]);\n  const hasPrev = currentPageState !== 1;\n  const hasNext = currentPageState !== maxPage;\n  buttons.push(React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${firstLabel}`,\n    onClick: () => onPaginationChange(1),\n    \"aria-label\": \"Go to first page\",\n    disabled: !hasPrev\n  }, firstLabel), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${prevLabel}`,\n    \"aria-label\": \"Go to previous page\",\n    // If out of bounds, prev button refers to the last page.\n    onClick: () => onPaginationChange(currentPageState - 1),\n    disabled: !hasPrev\n  }, prevLabel), ...pageNumbers.map(pageNumber => React.createElement(Button, {\n    key: `page-btn-${pageNumber}`,\n    onClick: () => onPaginationChange(pageNumber),\n    disabled: currentPageState === pageNumber,\n    \"aria-label\": `Go to page ${pageNumber}`,\n    className: classes === null || classes === void 0 ? void 0 : classes.button\n  }, pageNumber)), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${nextLabel}`,\n    onClick: () => onPaginationChange(currentPageState + 1),\n    \"aria-label\": \"Go to next page\",\n    disabled: !hasNext\n  }, nextLabel), React.createElement(Button, {\n    className: classes === null || classes === void 0 ? void 0 : classes.button,\n    key: `page-${lastLabel}`,\n    onClick: () => onPaginationChange(maxPage),\n    \"aria-label\": \"Go to last page\",\n    disabled: !hasNext\n  }, lastLabel));\n  return React.createElement(ButtonGroup, {\n    \"aria-label\": \"Pagination button group\",\n    className: makeClasses('ButtonGroup__root', classes === null || classes === void 0 ? void 0 : classes.buttonGroup, {\n      invisible: hidePagination\n    })\n  }, buttons);\n}","map":{"version":3,"names":["React","useEffect","useMemo","useRef","Button","ButtonGroup","useControlledStateSetter","makeClasses","useDatatableWrapper","getPageNumbers","DEFAULT_PAGINATION_RANGE","Pagination","labels","classes","paginationRange","alwaysShowPagination","controlledProps","currentPageState","currentPageStateContext","maxPage","maxPageContext","onPaginationChange","onPaginationChangeContext","currentPage","hidePagination","buttons","firstLabel","firstPage","prevLabel","prevPage","nextLabel","nextPage","lastLabel","lastPage","prevPageNumbers","undefined","pageNumbers","current","hasPrev","hasNext","push","createElement","className","button","key","onClick","disabled","map","pageNumber","buttonGroup","invisible"],"sources":["/home/wendel/desen/regulus/node_modules/react-bs-datatable/lib/esm/components/Pagination.js"],"sourcesContent":["import React, { useEffect, useMemo, useRef } from 'react';\nimport { Button, ButtonGroup } from 'react-bootstrap';\nimport { useControlledStateSetter } from '../helpers/hooks';\nimport { makeClasses } from '../helpers/object';\nimport { useDatatableWrapper } from './DatatableWrapper';\nimport { getPageNumbers } from '../helpers/pagination';\nconst DEFAULT_PAGINATION_RANGE = 3;\n/**\n * Renders a control for the pagination. It consists of \"First\", \"Prev\",\n * \"Next\", and \"Last\" buttons. Additionally, between the \"Prev\" and \"Next\" buttons,\n * there will be at maximum 3 numbered buttons, indicating the pages to navigate.\n *\n * The currently active page will always be disabled, as well as the \"First\" or \"Last\"\n * buttons if the `currentPage` represents the first page and last page, respectively.\n *\n * When `alwaysShowPagination` is set to `false`, then this component will be visually hidden.\n */\nexport function Pagination({ labels, classes, paginationRange = DEFAULT_PAGINATION_RANGE, alwaysShowPagination = true, controlledProps }) {\n    const { currentPageState: currentPageStateContext, maxPage: maxPageContext, onPaginationChange: onPaginationChangeContext } = useDatatableWrapper();\n    useControlledStateSetter(controlledProps);\n    // Controlled has the bigger priority.\n    const currentPageState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.currentPage) || currentPageStateContext;\n    const maxPage = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.maxPage) || maxPageContext;\n    const onPaginationChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onPaginationChange) || onPaginationChangeContext;\n    // Hide pagination if pagination is meant to not always be shown and the max page is 1,\n    // or if rows per page is -1.\n    const hidePagination = !alwaysShowPagination && maxPage === 1;\n    const buttons = [];\n    const firstLabel = (labels === null || labels === void 0 ? void 0 : labels.firstPage) || 'First';\n    const prevLabel = (labels === null || labels === void 0 ? void 0 : labels.prevPage) || 'Prev';\n    const nextLabel = (labels === null || labels === void 0 ? void 0 : labels.nextPage) || 'Next';\n    const lastLabel = (labels === null || labels === void 0 ? void 0 : labels.lastPage) || 'Last';\n    const prevPageNumbers = useRef(undefined);\n    const pageNumbers = useMemo(() => {\n        return getPageNumbers({\n            currentPageState,\n            maxPage,\n            paginationRange,\n            prevPageNumbers: prevPageNumbers.current\n        });\n    }, [currentPageState, maxPage, paginationRange]);\n    useEffect(() => {\n        prevPageNumbers.current = pageNumbers;\n    }, [pageNumbers]);\n    const hasPrev = currentPageState !== 1;\n    const hasNext = currentPageState !== maxPage;\n    buttons.push(React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${firstLabel}`, onClick: () => onPaginationChange(1), \"aria-label\": \"Go to first page\", disabled: !hasPrev }, firstLabel), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${prevLabel}`, \"aria-label\": \"Go to previous page\", \n        // If out of bounds, prev button refers to the last page.\n        onClick: () => onPaginationChange(currentPageState - 1), disabled: !hasPrev }, prevLabel), ...pageNumbers.map((pageNumber) => (React.createElement(Button, { key: `page-btn-${pageNumber}`, onClick: () => onPaginationChange(pageNumber), disabled: currentPageState === pageNumber, \"aria-label\": `Go to page ${pageNumber}`, className: classes === null || classes === void 0 ? void 0 : classes.button }, pageNumber))), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${nextLabel}`, onClick: () => onPaginationChange(currentPageState + 1), \"aria-label\": \"Go to next page\", disabled: !hasNext }, nextLabel), React.createElement(Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${lastLabel}`, onClick: () => onPaginationChange(maxPage), \"aria-label\": \"Go to last page\", disabled: !hasNext }, lastLabel));\n    return (React.createElement(ButtonGroup, { \"aria-label\": \"Pagination button group\", className: makeClasses('ButtonGroup__root', classes === null || classes === void 0 ? void 0 : classes.buttonGroup, {\n            invisible: hidePagination\n        }) }, buttons));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}