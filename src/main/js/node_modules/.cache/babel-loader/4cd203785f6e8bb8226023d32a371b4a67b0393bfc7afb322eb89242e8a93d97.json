{"ast":null,"code":"import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { filterData, getNextSortState, paginateData, sortData } from '../helpers/data';\nimport { convertArrayToRecord } from '../helpers/object';\nimport { createCtx } from '../helpers/react';\nconst [useCtx, Provider] = createCtx();\n/**\n * @internal\n *\n * This is an internal hook to use in all table components.\n */\nexport const useDatatableWrapper = useCtx;\nexport function DatatableWrapper({\n  headers,\n  body,\n  isControlled: isControlledProp,\n  filterProps,\n  sortProps,\n  paginationProps,\n  paginationOptionsProps,\n  checkboxProps,\n  tableEventsRef,\n  children\n}) {\n  const [state, setState] = useState(getDefaultDatatableState({\n    filterProps,\n    headers,\n    sortProps,\n    paginationProps,\n    paginationOptionsProps,\n    checkboxProps\n  }));\n  const [isControlled, setIsControlled] = useState(isControlledProp || false);\n  const headersRecordRef = useRef(convertArrayToRecord(headers, 'prop'));\n  // Store this in a ref because we might need it in case `headers` change.\n  // Though, we don't want to put these into `useEffect` because they most likely\n  // change over time.\n  const controlPropsRef = useRef({\n    filterProps,\n    sortProps,\n    paginationProps,\n    paginationOptionsProps,\n    checkboxProps\n  });\n  const {\n    previouslyModifiedCheckboxRef\n  } = useTableHeaderCheckbox();\n  useEffect(() => {\n    if (tableEventsRef !== undefined) {\n      console.warn('Warning: Usage of `tableEventsRef` is deprecated. Consider using `useDatatableWrapper`' + 'and raising the `DatatableWrapper` a bit higher in the structure instead.');\n    }\n  }, [tableEventsRef]);\n  useEffect(() => {\n    // Resets the table if the headers passed down is different.\n    if (headers !== undefined && !isControlled) {\n      // Re-set the ref.\n      headersRecordRef.current = convertArrayToRecord(headers, 'prop');\n      // Re-set the initial state.\n      setState(getDefaultDatatableState({\n        filterProps: controlPropsRef.current.filterProps,\n        headers,\n        sortProps: controlPropsRef.current.sortProps,\n        paginationProps: controlPropsRef.current.paginationProps,\n        paginationOptionsProps: controlPropsRef.current.paginationOptionsProps,\n        checkboxProps: controlPropsRef.current.checkboxProps\n      }));\n    }\n  }, [headers, isControlled]);\n  useEffect(() => {\n    // Resets the table if the data passed down is different.\n    if (body !== undefined && !isControlled) {\n      setState(oldState => Object.assign(Object.assign({}, oldState), {\n        filter: '',\n        pagination: Object.assign(Object.assign({}, oldState.pagination), {\n          currentPage: 1\n        })\n      }));\n    }\n  }, [body, isControlled]);\n  const onFilterChange = useCallback(text => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      filter: text,\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        currentPage: 1\n      })\n    }));\n  }, []);\n  const onPaginationChange = useCallback(nextPage => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        currentPage: nextPage\n      })\n    }));\n  }, []);\n  const onRowsPerPageChange = useCallback(numOfPage => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      pagination: Object.assign(Object.assign({}, oldState.pagination), {\n        rowsPerPage: numOfPage,\n        currentPage: 1\n      })\n    }));\n  }, []);\n  const onSortChange = useCallback(nextSort => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      sort: nextSort\n    }));\n  }, []);\n  const onSortByPropChange = useCallback(sortedProp => {\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      sort: getNextSortState(oldState.sort, sortedProp)\n    }));\n  }, []);\n  const onCheckboxChange = useCallback((result, event) => {\n    var _a;\n    // This is put here so that if we modify `result`, it'll be taken into account when we destructure it on the following line.\n    (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onCheckboxChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, result, event);\n    const {\n      checkboxProp,\n      nextCheckboxState\n    } = result;\n    setState(oldState => Object.assign(Object.assign({}, oldState), {\n      checkbox: Object.assign(Object.assign({}, oldState.checkbox), {\n        [checkboxProp]: nextCheckboxState\n      })\n    }));\n  }, [checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onCheckboxChange]);\n  // Imperative handle.\n  // This is if we want to keep the table events controllable from outside,\n  // without making the table controlled.\n  // TODO(imballinst): rethink about this for the next major version (4.x).\n  // https://github.com/imballinst/react-bs-datatable/pull/123#issuecomment-1050582200.\n  useImperativeHandle(tableEventsRef, () => ({\n    onFilterChange,\n    onPaginationChange,\n    onRowsPerPageChange,\n    onSortByPropChange,\n    onCheckboxChange\n  }), []);\n  const {\n    filter,\n    sort,\n    pagination,\n    isFilterable\n  } = state;\n  const {\n    data,\n    filteredDataLength,\n    maxPage\n  } = useMemo(() => {\n    let newData = body;\n    let newFilteredDataLength = newData.length;\n    let newMaxPage = 1;\n    if (!isControlled) {\n      // Only do this in uncontrolled mode.\n      if (isFilterable) {\n        newData = filterData(body, headersRecordRef.current, filter);\n        newFilteredDataLength = newData.length;\n      }\n      newData = sortData(newData, sort, sortProps === null || sortProps === void 0 ? void 0 : sortProps.sortValueObj);\n      if (pagination.rowsPerPage !== -1) {\n        // Pagination needs.\n        newMaxPage = Math.ceil(newData.length / pagination.rowsPerPage);\n        newData = paginateData(newData, pagination.currentPage, pagination.rowsPerPage);\n      }\n    }\n    return {\n      data: newData,\n      maxPage: newMaxPage,\n      filteredDataLength: newFilteredDataLength\n    };\n  }, [isControlled, body, filter, sort, pagination, isFilterable]);\n  return React.createElement(Provider, {\n    value: {\n      headers,\n      isControlled,\n      setIsControlled,\n      // Filter.\n      isFilterable: isFilterable,\n      filterState: filter,\n      onFilterChange,\n      // Sort.\n      sortState: sort,\n      onSortChange,\n      onSortByPropChange,\n      // Pagination.\n      currentPageState: pagination.currentPage,\n      onPaginationChange,\n      // Pagination options.\n      rowsPerPageState: pagination.rowsPerPage,\n      rowsPerPageOptions: pagination.rowsPerPageOptions,\n      onRowsPerPageChange,\n      // Checkbox.\n      checkboxState: state.checkbox,\n      previouslyModifiedCheckbox: previouslyModifiedCheckboxRef,\n      onCheckboxChange,\n      // Data.\n      maxPage,\n      filteredDataLength,\n      data,\n      body\n    }\n  }, children);\n}\n// Helper functions.\nfunction getDefaultDatatableState({\n  filterProps,\n  paginationOptionsProps,\n  paginationProps,\n  sortProps,\n  checkboxProps,\n  headers\n}) {\n  var _a, _b, _c, _d;\n  const defaultSort = (sortProps === null || sortProps === void 0 ? void 0 : sortProps.initialState) || {\n    order: 'asc',\n    prop: ''\n  };\n  const checkbox = (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) || {};\n  let isFilterable = filterProps !== undefined;\n  for (const header of headers) {\n    const prop = header.prop.toString();\n    if (defaultSort.prop === '' && header.isSortable) {\n      // If the sorted prop is still \"empty\", then we assign it with the current header.\n      defaultSort.prop = String(header.prop);\n    }\n    // Set the default checkbox values, if not provided from `checkboxProps`.\n    if (header.checkbox && (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) === undefined) {\n      checkbox[prop] = {\n        state: 'none-selected',\n        selected: new Set()\n      };\n    }\n    if (header.isFilterable) {\n      isFilterable = true;\n    }\n  }\n  // Define initial state.\n  return {\n    isFilterable,\n    filter: ((_a = filterProps === null || filterProps === void 0 ? void 0 : filterProps.initialState) === null || _a === void 0 ? void 0 : _a.filter) || '',\n    sort: defaultSort,\n    pagination: {\n      currentPage: ((_b = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.initialState) === null || _b === void 0 ? void 0 : _b.page) || 1,\n      rowsPerPage: ((_c = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _c === void 0 ? void 0 : _c.rowsPerPage) || -1,\n      rowsPerPageOptions: ((_d = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _d === void 0 ? void 0 : _d.options) || []\n    },\n    checkbox\n  };\n}\nfunction useTableHeaderCheckbox() {\n  const previouslyModifiedCheckboxRef = useRef({\n    checkboxProp: '',\n    idProp: ''\n  });\n  return {\n    previouslyModifiedCheckboxRef\n  };\n}","map":{"version":3,"names":["React","useCallback","useEffect","useImperativeHandle","useMemo","useRef","useState","filterData","getNextSortState","paginateData","sortData","convertArrayToRecord","createCtx","useCtx","Provider","useDatatableWrapper","DatatableWrapper","headers","body","isControlled","isControlledProp","filterProps","sortProps","paginationProps","paginationOptionsProps","checkboxProps","tableEventsRef","children","state","setState","getDefaultDatatableState","setIsControlled","headersRecordRef","controlPropsRef","previouslyModifiedCheckboxRef","useTableHeaderCheckbox","undefined","console","warn","current","oldState","Object","assign","filter","pagination","currentPage","onFilterChange","text","onPaginationChange","nextPage","onRowsPerPageChange","numOfPage","rowsPerPage","onSortChange","nextSort","sort","onSortByPropChange","sortedProp","onCheckboxChange","result","event","_a","call","checkboxProp","nextCheckboxState","checkbox","isFilterable","data","filteredDataLength","maxPage","newData","newFilteredDataLength","length","newMaxPage","sortValueObj","Math","ceil","createElement","value","filterState","sortState","currentPageState","rowsPerPageState","rowsPerPageOptions","checkboxState","previouslyModifiedCheckbox","_b","_c","_d","defaultSort","initialState","order","prop","header","toString","isSortable","String","selected","Set","page","options","idProp"],"sources":["/home/wendel/desen/regulus/node_modules/react-bs-datatable/lib/esm/components/DatatableWrapper.js"],"sourcesContent":["import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { filterData, getNextSortState, paginateData, sortData } from '../helpers/data';\nimport { convertArrayToRecord } from '../helpers/object';\nimport { createCtx } from '../helpers/react';\nconst [useCtx, Provider] = createCtx();\n/**\n * @internal\n *\n * This is an internal hook to use in all table components.\n */\nexport const useDatatableWrapper = useCtx;\nexport function DatatableWrapper({ headers, body, isControlled: isControlledProp, filterProps, sortProps, paginationProps, paginationOptionsProps, checkboxProps, tableEventsRef, children }) {\n    const [state, setState] = useState(getDefaultDatatableState({\n        filterProps,\n        headers,\n        sortProps,\n        paginationProps,\n        paginationOptionsProps,\n        checkboxProps\n    }));\n    const [isControlled, setIsControlled] = useState(isControlledProp || false);\n    const headersRecordRef = useRef(convertArrayToRecord(headers, 'prop'));\n    // Store this in a ref because we might need it in case `headers` change.\n    // Though, we don't want to put these into `useEffect` because they most likely\n    // change over time.\n    const controlPropsRef = useRef({\n        filterProps,\n        sortProps,\n        paginationProps,\n        paginationOptionsProps,\n        checkboxProps\n    });\n    const { previouslyModifiedCheckboxRef } = useTableHeaderCheckbox();\n    useEffect(() => {\n        if (tableEventsRef !== undefined) {\n            console.warn('Warning: Usage of `tableEventsRef` is deprecated. Consider using `useDatatableWrapper`' +\n                'and raising the `DatatableWrapper` a bit higher in the structure instead.');\n        }\n    }, [tableEventsRef]);\n    useEffect(() => {\n        // Resets the table if the headers passed down is different.\n        if (headers !== undefined && !isControlled) {\n            // Re-set the ref.\n            headersRecordRef.current = convertArrayToRecord(headers, 'prop');\n            // Re-set the initial state.\n            setState(getDefaultDatatableState({\n                filterProps: controlPropsRef.current.filterProps,\n                headers,\n                sortProps: controlPropsRef.current.sortProps,\n                paginationProps: controlPropsRef.current.paginationProps,\n                paginationOptionsProps: controlPropsRef.current.paginationOptionsProps,\n                checkboxProps: controlPropsRef.current.checkboxProps\n            }));\n        }\n    }, [headers, isControlled]);\n    useEffect(() => {\n        // Resets the table if the data passed down is different.\n        if (body !== undefined && !isControlled) {\n            setState((oldState) => (Object.assign(Object.assign({}, oldState), { filter: '', pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: 1 }) })));\n        }\n    }, [body, isControlled]);\n    const onFilterChange = useCallback((text) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { filter: text, pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: 1 }) })));\n    }, []);\n    const onPaginationChange = useCallback((nextPage) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { pagination: Object.assign(Object.assign({}, oldState.pagination), { currentPage: nextPage }) })));\n    }, []);\n    const onRowsPerPageChange = useCallback((numOfPage) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { pagination: Object.assign(Object.assign({}, oldState.pagination), { rowsPerPage: numOfPage, currentPage: 1 }) })));\n    }, []);\n    const onSortChange = useCallback((nextSort) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { sort: nextSort })));\n    }, []);\n    const onSortByPropChange = useCallback((sortedProp) => {\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { sort: getNextSortState(oldState.sort, sortedProp) })));\n    }, []);\n    const onCheckboxChange = useCallback((result, event) => {\n        var _a;\n        // This is put here so that if we modify `result`, it'll be taken into account when we destructure it on the following line.\n        (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onCheckboxChange) === null || _a === void 0 ? void 0 : _a.call(checkboxProps, result, event);\n        const { checkboxProp, nextCheckboxState } = result;\n        setState((oldState) => (Object.assign(Object.assign({}, oldState), { checkbox: Object.assign(Object.assign({}, oldState.checkbox), { [checkboxProp]: nextCheckboxState }) })));\n    }, [checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.onCheckboxChange]);\n    // Imperative handle.\n    // This is if we want to keep the table events controllable from outside,\n    // without making the table controlled.\n    // TODO(imballinst): rethink about this for the next major version (4.x).\n    // https://github.com/imballinst/react-bs-datatable/pull/123#issuecomment-1050582200.\n    useImperativeHandle(tableEventsRef, () => ({\n        onFilterChange,\n        onPaginationChange,\n        onRowsPerPageChange,\n        onSortByPropChange,\n        onCheckboxChange\n    }), []);\n    const { filter, sort, pagination, isFilterable } = state;\n    const { data, filteredDataLength, maxPage } = useMemo(() => {\n        let newData = body;\n        let newFilteredDataLength = newData.length;\n        let newMaxPage = 1;\n        if (!isControlled) {\n            // Only do this in uncontrolled mode.\n            if (isFilterable) {\n                newData = filterData(body, headersRecordRef.current, filter);\n                newFilteredDataLength = newData.length;\n            }\n            newData = sortData(newData, sort, sortProps === null || sortProps === void 0 ? void 0 : sortProps.sortValueObj);\n            if (pagination.rowsPerPage !== -1) {\n                // Pagination needs.\n                newMaxPage = Math.ceil(newData.length / pagination.rowsPerPage);\n                newData = paginateData(newData, pagination.currentPage, pagination.rowsPerPage);\n            }\n        }\n        return {\n            data: newData,\n            maxPage: newMaxPage,\n            filteredDataLength: newFilteredDataLength\n        };\n    }, [isControlled, body, filter, sort, pagination, isFilterable]);\n    return (React.createElement(Provider, { value: {\n            headers,\n            isControlled,\n            setIsControlled,\n            // Filter.\n            isFilterable: isFilterable,\n            filterState: filter,\n            onFilterChange,\n            // Sort.\n            sortState: sort,\n            onSortChange,\n            onSortByPropChange,\n            // Pagination.\n            currentPageState: pagination.currentPage,\n            onPaginationChange,\n            // Pagination options.\n            rowsPerPageState: pagination.rowsPerPage,\n            rowsPerPageOptions: pagination.rowsPerPageOptions,\n            onRowsPerPageChange,\n            // Checkbox.\n            checkboxState: state.checkbox,\n            previouslyModifiedCheckbox: previouslyModifiedCheckboxRef,\n            onCheckboxChange,\n            // Data.\n            maxPage,\n            filteredDataLength,\n            data,\n            body\n        } }, children));\n}\n// Helper functions.\nfunction getDefaultDatatableState({ filterProps, paginationOptionsProps, paginationProps, sortProps, checkboxProps, headers }) {\n    var _a, _b, _c, _d;\n    const defaultSort = (sortProps === null || sortProps === void 0 ? void 0 : sortProps.initialState) || {\n        order: 'asc',\n        prop: ''\n    };\n    const checkbox = (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) || {};\n    let isFilterable = filterProps !== undefined;\n    for (const header of headers) {\n        const prop = header.prop.toString();\n        if (defaultSort.prop === '' && header.isSortable) {\n            // If the sorted prop is still \"empty\", then we assign it with the current header.\n            defaultSort.prop = String(header.prop);\n        }\n        // Set the default checkbox values, if not provided from `checkboxProps`.\n        if (header.checkbox && (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.initialState) === undefined) {\n            checkbox[prop] = { state: 'none-selected', selected: new Set() };\n        }\n        if (header.isFilterable) {\n            isFilterable = true;\n        }\n    }\n    // Define initial state.\n    return {\n        isFilterable,\n        filter: ((_a = filterProps === null || filterProps === void 0 ? void 0 : filterProps.initialState) === null || _a === void 0 ? void 0 : _a.filter) || '',\n        sort: defaultSort,\n        pagination: {\n            currentPage: ((_b = paginationProps === null || paginationProps === void 0 ? void 0 : paginationProps.initialState) === null || _b === void 0 ? void 0 : _b.page) || 1,\n            rowsPerPage: ((_c = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _c === void 0 ? void 0 : _c.rowsPerPage) || -1,\n            rowsPerPageOptions: ((_d = paginationOptionsProps === null || paginationOptionsProps === void 0 ? void 0 : paginationOptionsProps.initialState) === null || _d === void 0 ? void 0 : _d.options) || []\n        },\n        checkbox\n    };\n}\nfunction useTableHeaderCheckbox() {\n    const previouslyModifiedCheckboxRef = useRef({\n        checkboxProp: '',\n        idProp: ''\n    });\n    return { previouslyModifiedCheckboxRef };\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,mBAAmB,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACrG,SAASC,UAAU,EAAEC,gBAAgB,EAAEC,YAAY,EAAEC,QAAQ,QAAQ,iBAAiB;AACtF,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,MAAM,CAACC,MAAM,EAAEC,QAAQ,CAAC,GAAGF,SAAS,CAAC,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,mBAAmB,GAAGF,MAAM;AACzC,OAAO,SAASG,gBAAgBA,CAAC;EAAEC,OAAO;EAAEC,IAAI;EAAEC,YAAY,EAAEC,gBAAgB;EAAEC,WAAW;EAAEC,SAAS;EAAEC,eAAe;EAAEC,sBAAsB;EAAEC,aAAa;EAAEC,cAAc;EAAEC;AAAS,CAAC,EAAE;EAC1L,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGvB,QAAQ,CAACwB,wBAAwB,CAAC;IACxDT,WAAW;IACXJ,OAAO;IACPK,SAAS;IACTC,eAAe;IACfC,sBAAsB;IACtBC;EACJ,CAAC,CAAC,CAAC;EACH,MAAM,CAACN,YAAY,EAAEY,eAAe,CAAC,GAAGzB,QAAQ,CAACc,gBAAgB,IAAI,KAAK,CAAC;EAC3E,MAAMY,gBAAgB,GAAG3B,MAAM,CAACM,oBAAoB,CAACM,OAAO,EAAE,MAAM,CAAC,CAAC;EACtE;EACA;EACA;EACA,MAAMgB,eAAe,GAAG5B,MAAM,CAAC;IAC3BgB,WAAW;IACXC,SAAS;IACTC,eAAe;IACfC,sBAAsB;IACtBC;EACJ,CAAC,CAAC;EACF,MAAM;IAAES;EAA8B,CAAC,GAAGC,sBAAsB,CAAC,CAAC;EAClEjC,SAAS,CAAC,MAAM;IACZ,IAAIwB,cAAc,KAAKU,SAAS,EAAE;MAC9BC,OAAO,CAACC,IAAI,CAAC,wFAAwF,GACjG,2EAA2E,CAAC;IACpF;EACJ,CAAC,EAAE,CAACZ,cAAc,CAAC,CAAC;EACpBxB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIe,OAAO,KAAKmB,SAAS,IAAI,CAACjB,YAAY,EAAE;MACxC;MACAa,gBAAgB,CAACO,OAAO,GAAG5B,oBAAoB,CAACM,OAAO,EAAE,MAAM,CAAC;MAChE;MACAY,QAAQ,CAACC,wBAAwB,CAAC;QAC9BT,WAAW,EAAEY,eAAe,CAACM,OAAO,CAAClB,WAAW;QAChDJ,OAAO;QACPK,SAAS,EAAEW,eAAe,CAACM,OAAO,CAACjB,SAAS;QAC5CC,eAAe,EAAEU,eAAe,CAACM,OAAO,CAAChB,eAAe;QACxDC,sBAAsB,EAAES,eAAe,CAACM,OAAO,CAACf,sBAAsB;QACtEC,aAAa,EAAEQ,eAAe,CAACM,OAAO,CAACd;MAC3C,CAAC,CAAC,CAAC;IACP;EACJ,CAAC,EAAE,CAACR,OAAO,EAAEE,YAAY,CAAC,CAAC;EAC3BjB,SAAS,CAAC,MAAM;IACZ;IACA,IAAIgB,IAAI,KAAKkB,SAAS,IAAI,CAACjB,YAAY,EAAE;MACrCU,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;QAAEG,MAAM,EAAE,EAAE;QAAEC,UAAU,EAAEH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACI,UAAU,CAAC,EAAE;UAAEC,WAAW,EAAE;QAAE,CAAC;MAAE,CAAC,CAAE,CAAC;IAC/K;EACJ,CAAC,EAAE,CAAC3B,IAAI,EAAEC,YAAY,CAAC,CAAC;EACxB,MAAM2B,cAAc,GAAG7C,WAAW,CAAE8C,IAAI,IAAK;IACzClB,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEG,MAAM,EAAEI,IAAI;MAAEH,UAAU,EAAEH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACI,UAAU,CAAC,EAAE;QAAEC,WAAW,EAAE;MAAE,CAAC;IAAE,CAAC,CAAE,CAAC;EACjL,CAAC,EAAE,EAAE,CAAC;EACN,MAAMG,kBAAkB,GAAG/C,WAAW,CAAEgD,QAAQ,IAAK;IACjDpB,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEI,UAAU,EAAEH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACI,UAAU,CAAC,EAAE;QAAEC,WAAW,EAAEI;MAAS,CAAC;IAAE,CAAC,CAAE,CAAC;EAC1K,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,mBAAmB,GAAGjD,WAAW,CAAEkD,SAAS,IAAK;IACnDtB,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEI,UAAU,EAAEH,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACI,UAAU,CAAC,EAAE;QAAEQ,WAAW,EAAED,SAAS;QAAEN,WAAW,EAAE;MAAE,CAAC;IAAE,CAAC,CAAE,CAAC;EAC3L,CAAC,EAAE,EAAE,CAAC;EACN,MAAMQ,YAAY,GAAGpD,WAAW,CAAEqD,QAAQ,IAAK;IAC3CzB,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEe,IAAI,EAAED;IAAS,CAAC,CAAE,CAAC;EAC5F,CAAC,EAAE,EAAE,CAAC;EACN,MAAME,kBAAkB,GAAGvD,WAAW,CAAEwD,UAAU,IAAK;IACnD5B,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEe,IAAI,EAAE/C,gBAAgB,CAACgC,QAAQ,CAACe,IAAI,EAAEE,UAAU;IAAE,CAAC,CAAE,CAAC;EAC/H,CAAC,EAAE,EAAE,CAAC;EACN,MAAMC,gBAAgB,GAAGzD,WAAW,CAAC,CAAC0D,MAAM,EAAEC,KAAK,KAAK;IACpD,IAAIC,EAAE;IACN;IACA,CAACA,EAAE,GAAGpC,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACiC,gBAAgB,MAAM,IAAI,IAAIG,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACC,IAAI,CAACrC,aAAa,EAAEkC,MAAM,EAAEC,KAAK,CAAC;IAC9K,MAAM;MAAEG,YAAY;MAAEC;IAAkB,CAAC,GAAGL,MAAM;IAClD9B,QAAQ,CAAEW,QAAQ,IAAMC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAAC,EAAE;MAAEyB,QAAQ,EAAExB,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,QAAQ,CAACyB,QAAQ,CAAC,EAAE;QAAE,CAACF,YAAY,GAAGC;MAAkB,CAAC;IAAE,CAAC,CAAE,CAAC;EAClL,CAAC,EAAE,CAACvC,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACiC,gBAAgB,CAAC,CAAC;EAClG;EACA;EACA;EACA;EACA;EACAvD,mBAAmB,CAACuB,cAAc,EAAE,OAAO;IACvCoB,cAAc;IACdE,kBAAkB;IAClBE,mBAAmB;IACnBM,kBAAkB;IAClBE;EACJ,CAAC,CAAC,EAAE,EAAE,CAAC;EACP,MAAM;IAAEf,MAAM;IAAEY,IAAI;IAAEX,UAAU;IAAEsB;EAAa,CAAC,GAAGtC,KAAK;EACxD,MAAM;IAAEuC,IAAI;IAAEC,kBAAkB;IAAEC;EAAQ,CAAC,GAAGjE,OAAO,CAAC,MAAM;IACxD,IAAIkE,OAAO,GAAGpD,IAAI;IAClB,IAAIqD,qBAAqB,GAAGD,OAAO,CAACE,MAAM;IAC1C,IAAIC,UAAU,GAAG,CAAC;IAClB,IAAI,CAACtD,YAAY,EAAE;MACf;MACA,IAAI+C,YAAY,EAAE;QACdI,OAAO,GAAG/D,UAAU,CAACW,IAAI,EAAEc,gBAAgB,CAACO,OAAO,EAAEI,MAAM,CAAC;QAC5D4B,qBAAqB,GAAGD,OAAO,CAACE,MAAM;MAC1C;MACAF,OAAO,GAAG5D,QAAQ,CAAC4D,OAAO,EAAEf,IAAI,EAAEjC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACoD,YAAY,CAAC;MAC/G,IAAI9B,UAAU,CAACQ,WAAW,KAAK,CAAC,CAAC,EAAE;QAC/B;QACAqB,UAAU,GAAGE,IAAI,CAACC,IAAI,CAACN,OAAO,CAACE,MAAM,GAAG5B,UAAU,CAACQ,WAAW,CAAC;QAC/DkB,OAAO,GAAG7D,YAAY,CAAC6D,OAAO,EAAE1B,UAAU,CAACC,WAAW,EAAED,UAAU,CAACQ,WAAW,CAAC;MACnF;IACJ;IACA,OAAO;MACHe,IAAI,EAAEG,OAAO;MACbD,OAAO,EAAEI,UAAU;MACnBL,kBAAkB,EAAEG;IACxB,CAAC;EACL,CAAC,EAAE,CAACpD,YAAY,EAAED,IAAI,EAAEyB,MAAM,EAAEY,IAAI,EAAEX,UAAU,EAAEsB,YAAY,CAAC,CAAC;EAChE,OAAQlE,KAAK,CAAC6E,aAAa,CAAC/D,QAAQ,EAAE;IAAEgE,KAAK,EAAE;MACvC7D,OAAO;MACPE,YAAY;MACZY,eAAe;MACf;MACAmC,YAAY,EAAEA,YAAY;MAC1Ba,WAAW,EAAEpC,MAAM;MACnBG,cAAc;MACd;MACAkC,SAAS,EAAEzB,IAAI;MACfF,YAAY;MACZG,kBAAkB;MAClB;MACAyB,gBAAgB,EAAErC,UAAU,CAACC,WAAW;MACxCG,kBAAkB;MAClB;MACAkC,gBAAgB,EAAEtC,UAAU,CAACQ,WAAW;MACxC+B,kBAAkB,EAAEvC,UAAU,CAACuC,kBAAkB;MACjDjC,mBAAmB;MACnB;MACAkC,aAAa,EAAExD,KAAK,CAACqC,QAAQ;MAC7BoB,0BAA0B,EAAEnD,6BAA6B;MACzDwB,gBAAgB;MAChB;MACAW,OAAO;MACPD,kBAAkB;MAClBD,IAAI;MACJjD;IACJ;EAAE,CAAC,EAAES,QAAQ,CAAC;AACtB;AACA;AACA,SAASG,wBAAwBA,CAAC;EAAET,WAAW;EAAEG,sBAAsB;EAAED,eAAe;EAAED,SAAS;EAAEG,aAAa;EAAER;AAAQ,CAAC,EAAE;EAC3H,IAAI4C,EAAE,EAAEyB,EAAE,EAAEC,EAAE,EAAEC,EAAE;EAClB,MAAMC,WAAW,GAAG,CAACnE,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,SAAS,CAACoE,YAAY,KAAK;IAClGC,KAAK,EAAE,KAAK;IACZC,IAAI,EAAE;EACV,CAAC;EACD,MAAM3B,QAAQ,GAAG,CAACxC,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACiE,YAAY,KAAK,CAAC,CAAC;EACjH,IAAIxB,YAAY,GAAG7C,WAAW,KAAKe,SAAS;EAC5C,KAAK,MAAMyD,MAAM,IAAI5E,OAAO,EAAE;IAC1B,MAAM2E,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACE,QAAQ,CAAC,CAAC;IACnC,IAAIL,WAAW,CAACG,IAAI,KAAK,EAAE,IAAIC,MAAM,CAACE,UAAU,EAAE;MAC9C;MACAN,WAAW,CAACG,IAAI,GAAGI,MAAM,CAACH,MAAM,CAACD,IAAI,CAAC;IAC1C;IACA;IACA,IAAIC,MAAM,CAAC5B,QAAQ,IAAI,CAACxC,aAAa,KAAK,IAAI,IAAIA,aAAa,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,aAAa,CAACiE,YAAY,MAAMtD,SAAS,EAAE;MAC7H6B,QAAQ,CAAC2B,IAAI,CAAC,GAAG;QAAEhE,KAAK,EAAE,eAAe;QAAEqE,QAAQ,EAAE,IAAIC,GAAG,CAAC;MAAE,CAAC;IACpE;IACA,IAAIL,MAAM,CAAC3B,YAAY,EAAE;MACrBA,YAAY,GAAG,IAAI;IACvB;EACJ;EACA;EACA,OAAO;IACHA,YAAY;IACZvB,MAAM,EAAE,CAAC,CAACkB,EAAE,GAAGxC,WAAW,KAAK,IAAI,IAAIA,WAAW,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,WAAW,CAACqE,YAAY,MAAM,IAAI,IAAI7B,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAAClB,MAAM,KAAK,EAAE;IACxJY,IAAI,EAAEkC,WAAW;IACjB7C,UAAU,EAAE;MACRC,WAAW,EAAE,CAAC,CAACyC,EAAE,GAAG/D,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,eAAe,CAACmE,YAAY,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACa,IAAI,KAAK,CAAC;MACtK/C,WAAW,EAAE,CAAC,CAACmC,EAAE,GAAG/D,sBAAsB,KAAK,IAAI,IAAIA,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACkE,YAAY,MAAM,IAAI,IAAIH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACnC,WAAW,KAAK,CAAC,CAAC;MACnM+B,kBAAkB,EAAE,CAAC,CAACK,EAAE,GAAGhE,sBAAsB,KAAK,IAAI,IAAIA,sBAAsB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,sBAAsB,CAACkE,YAAY,MAAM,IAAI,IAAIF,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACY,OAAO,KAAK;IACxM,CAAC;IACDnC;EACJ,CAAC;AACL;AACA,SAAS9B,sBAAsBA,CAAA,EAAG;EAC9B,MAAMD,6BAA6B,GAAG7B,MAAM,CAAC;IACzC0D,YAAY,EAAE,EAAE;IAChBsC,MAAM,EAAE;EACZ,CAAC,CAAC;EACF,OAAO;IAAEnE;EAA8B,CAAC;AAC5C"},"metadata":{},"sourceType":"module","externalDependencies":[]}