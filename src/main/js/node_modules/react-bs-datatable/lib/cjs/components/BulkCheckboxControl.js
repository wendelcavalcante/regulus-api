"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BulkCheckboxControl = void 0;
const react_1 = __importDefault(require("react"));
const hooks_1 = require("../helpers/hooks");
const DatatableWrapper_1 = require("./DatatableWrapper");
/**
 * Renders a control for selection or deselection of all rows. This is
 * only useful when pagination and checkbox are both enabled. When only
 * some (or none) of the rows are checked, then this will render the
 * number of checked rows, as well as the "Select all" button.
 * On the other hand, when all rows are selected, then it will
 * change to "Deselect all" button.
 *
 * This is only fit for an uncontrolled table.
 */
function BulkCheckboxControl({ classes }) {
    const { checkboxState: checkboxStateContext, onCheckboxChange: onCheckboxChangeContext, filteredDataLength: filteredDataLengthContext, previouslyModifiedCheckbox: previouslyModifiedCheckboxContext, data } = (0, DatatableWrapper_1.useDatatableWrapper)();
    const checkboxState = checkboxStateContext;
    const filteredDataLength = filteredDataLengthContext;
    // Not sure why TypeScript is classifying this as non-nullable `CheckboxState` if we specify type by not using `as`.
    const previouslyModifiedCheckbox = checkboxState[previouslyModifiedCheckboxContext.current.checkboxProp];
    const onCheckboxChange = onCheckboxChangeContext;
    const state = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.state;
    let rendered;
    const { createBulkCheckboxClickHandler } = (0, hooks_1.useCreateCheckboxHandlers)({
        checkboxState,
        data,
        filteredDataLength,
        onCheckboxChange
    });
    const onClick = createBulkCheckboxClickHandler();
    const buttonClassName = (classes === null || classes === void 0 ? void 0 : classes.selectRemoveAllText) || 'text-primary p-0 border-0 bg-transparent';
    if (state === 'all-selected') {
        rendered = (react_1.default.createElement(react_1.default.Fragment, null,
            "All ",
            filteredDataLength,
            " ",
            pluralize('row', filteredDataLength),
            ' ',
            "selected.",
            react_1.default.createElement("button", { type: "button", tabIndex: 0, onClick: onClick, className: buttonClassName }, "Deselect all rows")));
    }
    else if (state === 'some-selected') {
        const selectedSize = previouslyModifiedCheckbox === null || previouslyModifiedCheckbox === void 0 ? void 0 : previouslyModifiedCheckbox.selected.size;
        rendered = (react_1.default.createElement(react_1.default.Fragment, null,
            selectedSize,
            " ",
            pluralize('row', selectedSize),
            " selected.",
            ' ',
            react_1.default.createElement("button", { type: "button", tabIndex: 0, onClick: onClick, className: buttonClassName }, "Select all rows")));
    }
    else {
        // Zero-width space.
        rendered = react_1.default.createElement("span", null, "\u200B");
    }
    return (react_1.default.createElement("div", { className: rendered === undefined ? 'invisible' : undefined }, rendered));
}
exports.BulkCheckboxControl = BulkCheckboxControl;
// Helper functions.
function pluralize(word, length) {
    if (length === 1)
        return word;
    return `${word}s`;
}
