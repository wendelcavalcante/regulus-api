"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pagination = void 0;
const react_1 = __importStar(require("react"));
const react_bootstrap_1 = require("react-bootstrap");
const hooks_1 = require("../helpers/hooks");
const object_1 = require("../helpers/object");
const DatatableWrapper_1 = require("./DatatableWrapper");
const pagination_1 = require("../helpers/pagination");
const DEFAULT_PAGINATION_RANGE = 3;
/**
 * Renders a control for the pagination. It consists of "First", "Prev",
 * "Next", and "Last" buttons. Additionally, between the "Prev" and "Next" buttons,
 * there will be at maximum 3 numbered buttons, indicating the pages to navigate.
 *
 * The currently active page will always be disabled, as well as the "First" or "Last"
 * buttons if the `currentPage` represents the first page and last page, respectively.
 *
 * When `alwaysShowPagination` is set to `false`, then this component will be visually hidden.
 */
function Pagination({ labels, classes, paginationRange = DEFAULT_PAGINATION_RANGE, alwaysShowPagination = true, controlledProps }) {
    const { currentPageState: currentPageStateContext, maxPage: maxPageContext, onPaginationChange: onPaginationChangeContext } = (0, DatatableWrapper_1.useDatatableWrapper)();
    (0, hooks_1.useControlledStateSetter)(controlledProps);
    // Controlled has the bigger priority.
    const currentPageState = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.currentPage) || currentPageStateContext;
    const maxPage = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.maxPage) || maxPageContext;
    const onPaginationChange = (controlledProps === null || controlledProps === void 0 ? void 0 : controlledProps.onPaginationChange) || onPaginationChangeContext;
    // Hide pagination if pagination is meant to not always be shown and the max page is 1,
    // or if rows per page is -1.
    const hidePagination = !alwaysShowPagination && maxPage === 1;
    const buttons = [];
    const firstLabel = (labels === null || labels === void 0 ? void 0 : labels.firstPage) || 'First';
    const prevLabel = (labels === null || labels === void 0 ? void 0 : labels.prevPage) || 'Prev';
    const nextLabel = (labels === null || labels === void 0 ? void 0 : labels.nextPage) || 'Next';
    const lastLabel = (labels === null || labels === void 0 ? void 0 : labels.lastPage) || 'Last';
    const prevPageNumbers = (0, react_1.useRef)(undefined);
    const pageNumbers = (0, react_1.useMemo)(() => {
        return (0, pagination_1.getPageNumbers)({
            currentPageState,
            maxPage,
            paginationRange,
            prevPageNumbers: prevPageNumbers.current
        });
    }, [currentPageState, maxPage, paginationRange]);
    (0, react_1.useEffect)(() => {
        prevPageNumbers.current = pageNumbers;
    }, [pageNumbers]);
    const hasPrev = currentPageState !== 1;
    const hasNext = currentPageState !== maxPage;
    buttons.push(react_1.default.createElement(react_bootstrap_1.Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${firstLabel}`, onClick: () => onPaginationChange(1), "aria-label": "Go to first page", disabled: !hasPrev }, firstLabel), react_1.default.createElement(react_bootstrap_1.Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${prevLabel}`, "aria-label": "Go to previous page", 
        // If out of bounds, prev button refers to the last page.
        onClick: () => onPaginationChange(currentPageState - 1), disabled: !hasPrev }, prevLabel), ...pageNumbers.map((pageNumber) => (react_1.default.createElement(react_bootstrap_1.Button, { key: `page-btn-${pageNumber}`, onClick: () => onPaginationChange(pageNumber), disabled: currentPageState === pageNumber, "aria-label": `Go to page ${pageNumber}`, className: classes === null || classes === void 0 ? void 0 : classes.button }, pageNumber))), react_1.default.createElement(react_bootstrap_1.Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${nextLabel}`, onClick: () => onPaginationChange(currentPageState + 1), "aria-label": "Go to next page", disabled: !hasNext }, nextLabel), react_1.default.createElement(react_bootstrap_1.Button, { className: classes === null || classes === void 0 ? void 0 : classes.button, key: `page-${lastLabel}`, onClick: () => onPaginationChange(maxPage), "aria-label": "Go to last page", disabled: !hasNext }, lastLabel));
    return (react_1.default.createElement(react_bootstrap_1.ButtonGroup, { "aria-label": "Pagination button group", className: (0, object_1.makeClasses)('ButtonGroup__root', classes === null || classes === void 0 ? void 0 : classes.buttonGroup, {
            invisible: hidePagination
        }) }, buttons));
}
exports.Pagination = Pagination;
