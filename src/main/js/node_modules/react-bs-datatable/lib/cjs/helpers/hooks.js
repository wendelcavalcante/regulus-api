"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCreateCheckboxHandlers = exports.useControlledStateSetter = void 0;
const react_1 = require("react");
const DatatableWrapper_1 = require("../components/DatatableWrapper");
const checkbox_1 = require("./checkbox");
function useControlledStateSetter(controlledProps) {
    // Make this only run once.
    const { setIsControlled } = (0, DatatableWrapper_1.useDatatableWrapper)();
    const ref = (0, react_1.useRef)(controlledProps);
    (0, react_1.useEffect)(() => {
        if (ref.current !== undefined) {
            setIsControlled(true);
        }
    }, []);
}
exports.useControlledStateSetter = useControlledStateSetter;
/**
 * A hook containing functions to create table checkbox event handlers.
 * As library users, most likely you'll most likely be using `createBulkCheckboxClickHandler`. Example usage:
 *
 * ```
 * const { createBulkCheckboxClickHandler } = useCreateCheckboxHandlers();
 * const onClick = createBulkCheckboxClickHandler('add', {
 *   checkboxProp: 'checkbox',
 *   idProp: 'name'
 * })
 *
 * <button onClick={onClick}>Add all to selection</button>
 * ```
 */
function useCreateCheckboxHandlers(param) {
    const { checkboxState: checkboxStateContext, onCheckboxChange: onCheckboxChangeContext, filteredDataLength: filteredDataLengthContext, previouslyModifiedCheckbox, data: dataContext, body } = (0, DatatableWrapper_1.useDatatableWrapper)();
    const { checkboxState: checkboxStateProp, onCheckboxChange: onCheckboxChangeProp, filteredDataLength: filteredDataLengthProp, data: dataProp } = param || {};
    const checkboxState = checkboxStateProp || checkboxStateContext;
    const onCheckboxChange = onCheckboxChangeProp || onCheckboxChangeContext;
    const filteredDataLength = filteredDataLengthProp || filteredDataLengthContext;
    const data = dataProp || dataContext;
    // Whenever we change checkbox, we should update the table header's column representation as well.
    function onCheckboxChangeEffectForHeaderColumn({ idProp, checkboxProp }) {
        previouslyModifiedCheckbox.current = { checkboxProp, idProp };
    }
    // TODO: refactor to be an object parameter in the next major version.
    /**
     * Creates a bulk checkbox click handler. There are 2 ways to use this function:
     *
     * 1. Specify explicitly: `createBulkCheckboxClickHandler("add")` or `createBulkCheckboxClickHandler("remove")`.
     *    This will create a handler that will alwaays either add all to selection or remove all from selection.
     * 2. Don't pass an argument: `createBulkCheckboxClickHandler()`. Using this, the action will be "computed"
     *    by this function internals.
     */
    function createBulkCheckboxClickHandler(type, checkboxInfo, checkboxStateOverrider) {
        const checkboxProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.checkboxProp) ||
            previouslyModifiedCheckbox.current.checkboxProp;
        const idProp = (checkboxInfo === null || checkboxInfo === void 0 ? void 0 : checkboxInfo.idProp) || previouslyModifiedCheckbox.current.idProp;
        let effectiveType = type;
        if (!effectiveType) {
            const previouslyUpdatedCheckbox = checkboxState[checkboxProp];
            const state = previouslyUpdatedCheckbox === null || previouslyUpdatedCheckbox === void 0 ? void 0 : previouslyUpdatedCheckbox.state;
            if (state === 'all-selected') {
                effectiveType = 'remove';
            }
            else if (state === 'some-selected') {
                effectiveType = 'add';
            }
        }
        return (event) => {
            if (!effectiveType)
                return;
            let nextCheckboxState = (0, checkbox_1.getNextCheckboxState)({
                checkboxState,
                data: body,
                filteredDataLength,
                idProp,
                checkboxProp,
                type: effectiveType
            });
            if (checkboxStateOverrider) {
                nextCheckboxState = checkboxStateOverrider(nextCheckboxState);
            }
            const params = [
                {
                    checkboxProp,
                    nextCheckboxState
                },
                {
                    others: event
                }
            ];
            onCheckboxChange(...params);
            onCheckboxChangeEffectForHeaderColumn({
                checkboxProp,
                idProp
            });
        };
    }
    /**
     * Creates a table body column checkbox click handler. This will be mostly used in the library's internals.
     */
    function createColumnCheckboxClickHandler({ checkboxProp, idProp, rowIdx }) {
        return (event) => {
            const isSelected = checkboxState[checkboxProp].selected.has(data[rowIdx][idProp]);
            const nextCheckboxState = (0, checkbox_1.getNextCheckboxState)({
                checkboxState,
                data: data[rowIdx],
                idProp,
                filteredDataLength,
                checkboxProp,
                type: isSelected ? 'remove' : 'add'
            });
            const params = [
                {
                    checkboxProp,
                    nextCheckboxState
                },
                {
                    checkbox: event
                }
            ];
            onCheckboxChange(...params);
            onCheckboxChangeEffectForHeaderColumn({
                checkboxProp,
                idProp
            });
        };
    }
    /**
     * Creates a table header column checkbox click handler. This will be mostly used in the library's internals.
     */
    function createHeaderCheckboxClickHandler({ checkboxProp, idProp }) {
        return (event) => {
            let numberOfSelectedRowsInCurrentPage = 0;
            let nextCheckboxType;
            for (const row of data) {
                if (checkboxState[checkboxProp].selected.has(row[idProp])) {
                    numberOfSelectedRowsInCurrentPage += 1;
                }
            }
            if (numberOfSelectedRowsInCurrentPage === data.length) {
                nextCheckboxType = 'remove';
            }
            else {
                nextCheckboxType = 'add';
            }
            const nextCheckboxState = (0, checkbox_1.getNextCheckboxState)({
                checkboxState,
                data,
                idProp,
                filteredDataLength,
                checkboxProp,
                type: nextCheckboxType
            });
            const params = [
                {
                    checkboxProp,
                    nextCheckboxState
                },
                {
                    checkbox: event
                }
            ];
            onCheckboxChange(...params);
            onCheckboxChangeEffectForHeaderColumn({
                checkboxProp,
                idProp
            });
        };
    }
    return {
        createBulkCheckboxClickHandler,
        createColumnCheckboxClickHandler,
        createHeaderCheckboxClickHandler
    };
}
exports.useCreateCheckboxHandlers = useCreateCheckboxHandlers;
