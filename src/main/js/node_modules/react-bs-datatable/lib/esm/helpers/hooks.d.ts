import React from 'react';
import { CheckboxOnChange, CheckboxState } from './types';
export declare function useControlledStateSetter<ControlledPropsType extends object>(controlledProps: ControlledPropsType | undefined): void;
/**
 * The optional object passed to the `useCreateCheckboxHandlers` function.
 * Pass the object if you are using controlled table.
 */
export interface useCreateCheckboxHandlersParameter {
    checkboxState: Record<string, CheckboxState>;
    onCheckboxChange: CheckboxOnChange;
    filteredDataLength: number;
    data: any[];
}
/**
 * A hook containing functions to create table checkbox event handlers.
 * As library users, most likely you'll most likely be using `createBulkCheckboxClickHandler`. Example usage:
 *
 * ```
 * const { createBulkCheckboxClickHandler } = useCreateCheckboxHandlers();
 * const onClick = createBulkCheckboxClickHandler('add', {
 *   checkboxProp: 'checkbox',
 *   idProp: 'name'
 * })
 *
 * <button onClick={onClick}>Add all to selection</button>
 * ```
 */
export declare function useCreateCheckboxHandlers(param?: useCreateCheckboxHandlersParameter): {
    createBulkCheckboxClickHandler: (type?: "add" | "remove" | undefined, checkboxInfo?: {
        idProp: string;
        checkboxProp: string;
    } | undefined, checkboxStateOverrider?: ((prev: CheckboxState) => CheckboxState) | undefined) => (event: React.MouseEvent<HTMLElement>) => void;
    createColumnCheckboxClickHandler: ({ checkboxProp, idProp, rowIdx }: {
        checkboxProp: string;
        idProp: string;
        rowIdx: number;
    }) => (event: React.ChangeEvent<HTMLInputElement>) => void;
    createHeaderCheckboxClickHandler: ({ checkboxProp, idProp }: {
        checkboxProp: string;
        idProp: string;
    }) => (event: React.ChangeEvent<HTMLInputElement>) => void;
};
