/**
 * @internal
 *
 * This function is used to get the next checkbox state. This function is separated
 * because the checkbox state is used in both `TableHeader` and `TableBody` components.
 */
export function getNextCheckboxState({ checkboxState, checkboxProp, data, filteredDataLength, idProp, type }) {
    const nextCheckboxState = Object.assign({}, checkboxState[checkboxProp]);
    const newSet = new Set(checkboxState[checkboxProp].selected);
    if (Array.isArray(data)) {
        for (const row of data) {
            const value = row[idProp];
            addOrRemoveFromSet(newSet, value, type);
        }
    }
    else {
        addOrRemoveFromSet(newSet, data[idProp], type);
    }
    nextCheckboxState.selected = newSet;
    nextCheckboxState.state =
        newSet.size === 0
            ? 'none-selected'
            : newSet.size === filteredDataLength
                ? 'all-selected'
                : 'some-selected';
    return nextCheckboxState;
}
// Helper functions.
function addOrRemoveFromSet(set, value, type) {
    // Depending on the checkbox state, delete or add.
    if (type === 'remove') {
        set.delete(value);
    }
    else {
        set.add(value);
    }
}
