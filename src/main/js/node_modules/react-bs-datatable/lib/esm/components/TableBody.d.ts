import React from 'react';
import { CheckboxOnChange, CheckboxState, TableRowType } from '../helpers/types';
export interface TableBodyLabels {
    /**
     * The text shown when there is no result, which can be because of
     * no data (empty array), or no matching found for the filtered text.
     */
    noResults?: string;
}
export interface TableBodyClasses {
    /** The class for the `tbody` tag. */
    tbody?: string;
    /** The class for the `tr` tags inside `tbody`. */
    tr?: string;
    /** The class for the `td` tags inside each `tr` tag. */
    td?: string;
}
export interface TableBodyControlledProps {
    /**
     * A record, which key is the column prop name and the value
     * is of type `CheckboxState`.
     */
    checkboxState?: Record<string, CheckboxState>;
    /** The function fired when any checkbox in the table changes. */
    onCheckboxChange?: CheckboxOnChange;
    /**
     * The filtered data length. When not using filter control,
     * then this should equal to the table body's length.
     */
    filteredDataLength?: number;
}
export declare type HtmlTrProps = Omit<React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>, 'onClick'>;
/**
 * This is an interface for `TableBody` component props.
 */
export interface TableBodyProps<TTableRowType extends TableRowType> {
    /** Customize the labels of the `TableBody` component. */
    labels?: TableBodyLabels;
    /** Customize the classes of the `TableBody` component. */
    classes?: TableBodyClasses;
    /** The props passed to the table rows under `tbody`. */
    rowProps?: HtmlTrProps | ((row: TTableRowType) => HtmlTrProps);
    /** The function fired when any of the rows is clicked. */
    onRowClick?: (row: TTableRowType, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
    /** Props to make the component controlled. */
    controlledProps?: TableBodyControlledProps;
    /** The function to customize the table rows. */
    children?: ((rows: TTableRowType[]) => JSX.Element | JSX.Element[]) | JSX.Element | JSX.Element[];
}
/**
 * Renders the table body, which is a `tbody` tag along with the rest of the elements,
 * such as `tr` and `td` tags.
 */
export declare function TableBody<TTableRowType extends TableRowType>({ labels, classes, rowProps, onRowClick: onRowClickProp, controlledProps, children }: TableBodyProps<TTableRowType>): JSX.Element;
/**
 * The props for the `TableRow` component.
 */
export interface TableRowProps<TTableRowType extends TableRowType> {
    /** The row data. */
    rowData: TTableRowType;
    /** The row index. */
    rowIdx: number;
    /** Optional row on click event. */
    onRowClick?: (row: TTableRowType, event: React.MouseEvent<HTMLTableRowElement, MouseEvent>) => void;
    /** Classes for the rows and columns. */
    classes?: Omit<TableBodyClasses, 'tbody'>;
    /** Props to make the component controlled. */
    controlledProps?: TableBodyProps<TTableRowType>['controlledProps'];
    /** Props to the `tr` element. */
    rowProps?: TableBodyProps<TTableRowType>['rowProps'];
}
/**
 * `TableRow` component, as its name suggests, is a component to render a row of a table.
 * This component is exported so it is possible to compose the rows further. For example:
 *
 * ```
 * <TableBody>
 *   {
 *     data.map((row, rowIdx) => (
 *       row.isLoading ? (
 *         <tr><td colSpan={headers.length}><Loading /></td></tr>
 *       ) : (
 *         <TableRow rowData={row} rowIdx={rowIdx} />
 *       )
 *     ))
 *   }
 * </TableBody>
 * ```
 *
 * The above snippet will render loading indicator for rows that don't have sufficient data to store yet.
 */
export declare function TableRow<TTableRowType extends TableRowType>({ rowData, rowIdx, onRowClick: onRowClickProp, classes, controlledProps, rowProps }: TableRowProps<TTableRowType>): JSX.Element;
/**
 * This is the props for the `EmptyTablePlaceholder` component.
 */
export interface EmptyTablePlaceholderProps {
    /** The className to pass to the component. */
    className?: string;
    /** The label that will show up when the table is empty. */
    noResultsLabel?: string;
}
/**
 * `EmptyTablePlaceholder` is a component used to indicate that a table is empty, or doesn't
 * have matching search results.
 *
 * @param param0
 * @returns
 */
export declare function EmptyTablePlaceholder({ className, noResultsLabel }: EmptyTablePlaceholderProps): JSX.Element;
