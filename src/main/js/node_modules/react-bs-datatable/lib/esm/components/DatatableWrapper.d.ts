import React, { MutableRefObject, ReactNode } from 'react';
import { CheckboxOnChange, CheckboxState, ColumnProcessObj, FilterOnChange, PaginationOnChange, RowsPerPageOnChange, SortByPropOnChange, SortType, TableRowType } from '../helpers/types';
import { TableColumnType } from '../helpers/types';
/**
 * This is the additional parameters for the filter function.
 * Only applicable for uncontrolled table mode.
 */
export interface TableFilterParameters {
    /** The initial states for the table. */
    initialState?: {
        /** The initial text filter state. */
        filter: string;
    };
}
/**
 * This is the additional parameters for the filter function.
 * Only applicable for uncontrolled table mode.
 */
export interface TableSortParameters<TTableRowType> {
    /**
     * An object with the key being the table columns' prop and
     * the value being the value converter for the column.
     * This is most useful when we want to sort something by number
     * instead of by text.
     *
     * For example, we want to convert a date format
     * as the following: "Jan 22, 2022". Since string sorting will result
     * in a wrong result, then we need to convert it first, e.g. using `date-fns`.
     * After we parse the column's formatted date, only then we can get its
     * number value.
     *
     * ```ts
     * {
     *   sortValueObject: {
     *     date: (column: string) => parse(column).getTime()
     *   }
     * }
     * ```
     *
     * The object above will cause all rows in the `date` column to be sorted
     * by number (milliseconds) instead of by formatted date string.
     */
    sortValueObj?: ColumnProcessObj<TTableRowType, number>;
    /** The initial states for the table. */
    initialState?: SortType;
}
/**
 * This is the additional parameters for the filter function.
 * Only applicable for uncontrolled table mode.
 */
export interface TablePaginationParameters {
    /** The initial states for the table. */
    initialState?: {
        /** The initial currently active page. */
        page: number;
        /**
         * The initial maximum page. This is used to determine
         * the last numbered button in the pagination button group.
         * This also determines the next page number when the
         * "Last" button is clicked.
         */
        maxPage: number;
    };
}
/**
 * This is the additional parameters for the filter function.
 * Only applicable for uncontrolled table mode.
 */
export interface TablePaginationOptionsParameters {
    /** The initial states for the table. */
    initialState?: {
        /** Number of rows per page to be shown. */
        rowsPerPage: number;
        /** Rows per page options that will be shown in the dropdown. */
        options: number[];
    };
}
/**
 * This is the additional parameters for the filter function.
 * Only applicable for uncontrolled table mode.
 */
export interface TableCheckboxParameters {
    /** The initial states for the table. */
    initialState?: Record<string, CheckboxState>;
    /** Change event for the checkboxes state. */
    onCheckboxChange?: CheckboxOnChange;
}
export interface UncontrolledTableEvents {
    onFilterChange: FilterOnChange;
    onSortByPropChange: SortByPropOnChange;
    onPaginationChange: PaginationOnChange;
    onRowsPerPageChange: RowsPerPageOnChange;
    onCheckboxChange: CheckboxOnChange;
}
/**
 * @internal
 *
 * This is the values stored in the `DatatableWrapper` context.
 */
interface DatatableWrapperContextType<TTableRowType> {
    headers: TableColumnType<TTableRowType>[];
    isControlled: boolean;
    setIsControlled: React.Dispatch<React.SetStateAction<boolean>>;
    isFilterable: boolean;
    filterState: string;
    onFilterChange: (nextState: string) => void;
    sortState: SortType;
    onSortChange: (nextProp: SortType) => void;
    onSortByPropChange: (sortedProp: string) => void;
    currentPageState: number;
    onPaginationChange: (nextState: number) => void;
    rowsPerPageState: number;
    rowsPerPageOptions: number[];
    onRowsPerPageChange: (nextState: number) => void;
    checkboxState: Record<string, CheckboxState>;
    /**
     * @internal
     *
     * This is mostly for internal usage.
     */
    previouslyModifiedCheckbox: MutableRefObject<PreviouslyModifiedCheckbox>;
    onCheckboxChange: CheckboxOnChange;
    maxPage: number;
    filteredDataLength: number;
    data: TTableRowType[];
    body: TTableRowType[];
}
/**
 * @internal
 *
 * This is an internal hook to use in all table components.
 */
export declare const useDatatableWrapper: () => DatatableWrapperContextType<any>;
/**
 * The props that can be passed to the `DatatableWrapper` component.
 */
export interface DatatableWrapperProps<TTableRowType extends TableRowType> {
    /** The rest of the table, including its controls. */
    children: ReactNode;
    headers: TableColumnType<TTableRowType>[];
    body: TTableRowType[];
    /**
     * @deprecated
     *
     * This prop is deprecated; now the table is automatically set as controlled
     * when any of the child components is provided `controlledProps`.
     */
    isControlled?: boolean;
    filterProps?: TableFilterParameters;
    sortProps?: TableSortParameters<TTableRowType>;
    paginationProps?: TablePaginationParameters;
    paginationOptionsProps?: TablePaginationOptionsParameters;
    checkboxProps?: TableCheckboxParameters;
    /**
     * @deprecated
     *
     * Usage of `tableEventsRef` is deprecated. Consider using `useDatatableWrapper`
     * and raising the `DatatableWrapper` a bit higher in the structure instead.
     */
    tableEventsRef?: MutableRefObject<UncontrolledTableEvents | undefined>;
}
/**
 * @internal
 *
 * This is an interface to represent the previously modified checkbox. This is used
 * for the "Select all" and "Deselect all" interaction.
 *
 * The `idProp` is to indicate the column that are we going to use as the ID,
 * whereas `checkboxProp` is used to indicate the checkbox column.
 *
 * It's pretty rare that we're going to have multiple checkbox columns, but hey,
 * better safe than sorry.
 */
interface PreviouslyModifiedCheckbox {
    idProp: string;
    checkboxProp: string;
}
export declare function DatatableWrapper<TTableRowType extends TableRowType>({ headers, body, isControlled: isControlledProp, filterProps, sortProps, paginationProps, paginationOptionsProps, checkboxProps, tableEventsRef, children }: DatatableWrapperProps<TTableRowType>): JSX.Element;
export {};
